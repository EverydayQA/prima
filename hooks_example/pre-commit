#!/usr/bin/env bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".


if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If there are whitespace errors, print the offending file names and fail.
git diff-index --check --cached $against --

# perl sample
exit_status=0

	
while read st file; do

    echo $file
    # skip deleted files
    if [ "$st" == 'D' ]; then continue; fi
    # do a check only on the perl files
    if [ "${file: -3}" == ".pl" ]; then
	perl -c "$file"
	compile_status=$?
	echo "$file perl syntax with compile status $compile_status"
	if [ $compile_status -ne 0 ]; then
	    exit_status=1
	fi
    elif [[ ${file: -3} == ".py" ]]; then

	# If the file differs from the index, we need to check out
	# the index in a different physical file
	# (syntax check won't work correctly on stdin for packages)
	work_status=$(git status --porcelain "$file" | cut -b 2)
	if [ "$work_status" != " " ]; then
		git show :"$file" > "$file.pycommit" 
		$PYTHON -m py_compile "$file.pycommit"
		compile_status=$?
		rm "$file.pycommit"
	else
		# otherwise simply check the file as-is
		$PYTHON -m py_compile "$file"
		compile_status=$?
	fi

	if [ $compile_status -ne 0 ]; then
		exit_status=1
	fi
    else
        echo "skip syntax check $file, not .pl .pm .py"
    fi

done <<EOD

$(git diff --cached --name-status) 
EOD

echo "exit with $exit_status"
exit $exit_status
